AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 5
    Runtime: python3.12
    MemorySize: 128

Parameters:
  VerifiedSenderEmail:
    Type: String
    Description: The email address verified with SES that will be used to send alerts.
  RecipientEmail:
    Type: String
    Description: The email address that will receive the alerts.

# S3 Bucket for storing logs 
Resources: 
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-logs"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption: # Server-side encryption configuration
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration: 
        Rules:
          - Id: "ExpireOldLogs"
            Status: Enabled
            ExpirationInDays: 30 # Automatically expire logs after 30 days

# Dynamo table to store/manage error logs
  LogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-error-logs"
      AttributeDefinitions:
        - AttributeName: "ServiceID" # partition key
          AttributeType: "S"
        - AttributeName: "ErrorTimestamp" # sort key 
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ServiceID"
          KeyType: "HASH"
        - AttributeName: "ErrorTimestamp"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST 
      TimeToLiveSpecification:
        AttributeName: "ExpirationTime"
        Enabled: true
      PointInTimeRecoverySpecification: # Enable point-in-time recovery
        PointInTimeRecoveryEnabled: true

  # IAM Role for Lambda function to access S3 and DynamoDB
  BaseLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub "${AWS::StackName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: # This policy allows Lambda service to assume this role
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - PolicyName: "LambdaS3DynamoDBAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3ObjectRW
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${LogBucket}"
              - Sid: DDBItemCRUD
                Effect: Allow  
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${LogTable}"

  # The SNS Topic that connects the two Lambdas
  AlertsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-alerts-topic"

  # P2's Lambda for analyzing logs, triggered by the API
  LogAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-log-analysis"
      CodeUri: lambda/analyze_logs/
      Handler: dummy_app.handler # Change to app.py after integration
      Role: !GetAtt BaseLambdaRole.Arn # Re-uses the role you already defined
      Policies:
        # Adds permission for THIS function to publish to our SNS topic
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AlertsSNSTopic.TopicName
      Environment:
        Variables:
          # Passes the SNS Topic ARN to the Lambda's code
          ALERTS_SNS_TOPIC_ARN: !Ref AlertsSNSTopic
      Events:
        # This creates the API Gateway endpoint that triggers this function
        ApiEvent:
          Type: Api
          Properties:
            Path: /logs
            Method: post

  # P3's Lambda for sending the final notification
  SendAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-send-alert"
      CodeUri: lambda/send_alert/
      Handler: app.handler
      Role: !GetAtt BaseLambdaRole.Arn # Also re-uses the base role
      Policies:
        # Adds permission for THIS function to send email via SES
        - SESCrudPolicy:
            IdentityName: !Ref VerifiedSenderEmail
      Environment:
        Variables:
          # Passes the email addresses from the parameters into the Lambda's code
          RECIPIENT_EMAIL: !Ref RecipientEmail
          SENDER_EMAIL: !Ref VerifiedSenderEmail
      Events:
        # This subscribes this Lambda to the SNS topic
        SNSEvent:
          Type: SNS
          Topic: !Ref AlertsSNSTopic       


# Outputs section to provide useful information after stack creation
Outputs:
  LogBucketName:
    Description: Name of the S3 bucket for raw logs
    Value: !Ref LogBucket
    Export: # Export the bucket name for re-use in other stacks
      Name: !Sub "${AWS::StackName}-LogBucketName"
  ErrorTableName:
    Description: DynamoDB table that stores error records
    Value: !Ref LogTable
    Export:
      Name: !Sub "${AWS::StackName}-ErrorTableName"
  BaseRoleArn:
    Description: Re-usable IAM role Arn for Lambda functions
    Value: !GetAtt BaseLambdaRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BaseRoleArn"
      Outputs:
  ApiEndpointUrl:
    Description: "API Gateway endpoint URL for ingesting logs"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/logs"